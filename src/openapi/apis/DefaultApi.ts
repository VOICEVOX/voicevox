/* tslint:disable */
/* eslint-disable */
/**
 * VOICEVOX ENGINE
 * VOICEVOXの音声合成エンジンです。
 *
 * The version of the OpenAPI document: 0.14.0-preview.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models';

export interface SettingPostSettingPostRequest {
    corsPolicyMode?: string;
    allowOrigin?: string;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Setting Get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    settingGetSettingGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;

    /**
     * Setting Get
     */
    settingGetSettingGet(initOverrides?: RequestInit): Promise<string>;

    /**
     * 
     * @summary Setting Post
     * @param {string} [corsPolicyMode] 
     * @param {string} [allowOrigin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    settingPostSettingPostRaw(requestParameters: SettingPostSettingPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;

    /**
     * Setting Post
     */
    settingPostSettingPost(requestParameters: SettingPostSettingPostRequest, initOverrides?: RequestInit): Promise<string>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * Setting Get
     */
    async settingGetSettingGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/setting`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Setting Get
     */
    async settingGetSettingGet(initOverrides?: RequestInit): Promise<string> {
        const response = await this.settingGetSettingGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Setting Post
     */
    async settingPostSettingPostRaw(requestParameters: SettingPostSettingPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.corsPolicyMode !== undefined) {
            formParams.append('cors_policy_mode', requestParameters.corsPolicyMode as any);
        }

        if (requestParameters.allowOrigin !== undefined) {
            formParams.append('allow_origin', requestParameters.allowOrigin as any);
        }

        const response = await this.request({
            path: `/setting`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Setting Post
     */
    async settingPostSettingPost(requestParameters: SettingPostSettingPostRequest, initOverrides?: RequestInit): Promise<string> {
        const response = await this.settingPostSettingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
