/* tslint:disable */
/* eslint-disable */
/**
 * VOICEVOX Engine
 * VOICEVOX の音声合成エンジンです。
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FramePhoneme } from './FramePhoneme';
import {
    FramePhonemeFromJSON,
    FramePhonemeFromJSONTyped,
    FramePhonemeToJSON,
} from './FramePhoneme';

/**
 * フレームごとの音声合成用のクエリ
 * @export
 * @interface FrameAudioQuery
 */
export interface FrameAudioQuery {
    /**
     * 
     * @type {Array<number>}
     * @memberof FrameAudioQuery
     */
    f0: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof FrameAudioQuery
     */
    volume: Array<number>;
    /**
     * 
     * @type {Array<FramePhoneme>}
     * @memberof FrameAudioQuery
     */
    phonemes: Array<FramePhoneme>;
    /**
     * 
     * @type {number}
     * @memberof FrameAudioQuery
     */
    volumeScale: number;
    /**
     * 
     * @type {number}
     * @memberof FrameAudioQuery
     */
    outputSamplingRate: number;
    /**
     * 
     * @type {boolean}
     * @memberof FrameAudioQuery
     */
    outputStereo: boolean;
}

/**
 * Check if a given object implements the FrameAudioQuery interface.
 */
export function instanceOfFrameAudioQuery(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "f0" in value;
    isInstance = isInstance && "volume" in value;
    isInstance = isInstance && "phonemes" in value;
    isInstance = isInstance && "volumeScale" in value;
    isInstance = isInstance && "outputSamplingRate" in value;
    isInstance = isInstance && "outputStereo" in value;

    return isInstance;
}

export function FrameAudioQueryFromJSON(json: any): FrameAudioQuery {
    return FrameAudioQueryFromJSONTyped(json, false);
}

export function FrameAudioQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): FrameAudioQuery {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'f0': json['f0'],
        'volume': json['volume'],
        'phonemes': ((json['phonemes'] as Array<any>).map(FramePhonemeFromJSON)),
        'volumeScale': json['volumeScale'],
        'outputSamplingRate': json['outputSamplingRate'],
        'outputStereo': json['outputStereo'],
    };
}

export function FrameAudioQueryToJSON(value?: FrameAudioQuery | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'f0': value.f0,
        'volume': value.volume,
        'phonemes': ((value.phonemes as Array<any>).map(FramePhonemeToJSON)),
        'volumeScale': value.volumeScale,
        'outputSamplingRate': value.outputSamplingRate,
        'outputStereo': value.outputStereo,
    };
}

